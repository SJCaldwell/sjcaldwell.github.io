name: Deploy Hugo site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.146.2
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Verify deployment
        run: |
          echo "Verifying deployment with commit: ${{ github.sha }}"
          TARGET_URL="${{ steps.deployment.outputs.page_url }}"
          echo "Target URL: ${TARGET_URL}"

          # Retry loop to allow CDN propagation and cache invalidation
          for attempt in {1..20}; do
            echo "Attempt ${attempt}..."
            BODY=$(curl -fsSL -L \
              -H 'Cache-Control: no-cache, no-store, max-age=0' \
              -H 'Pragma: no-cache' \
              --connect-timeout 10 --max-time 30 \
              "${TARGET_URL}") || true

            if echo "$BODY" | grep -qE '<meta[^>]+name=["\']build-id["\'][^>]+content=["\']${{ github.sha }}["\']'; then
              echo "Deployment verification successful via build-id meta tag."
              exit 0
            fi

            if echo "$BODY" | grep -q "${{ github.sha }}"; then
              echo "Deployment verification successful via raw SHA match."
              exit 0
            fi

            echo "Not updated yet; waiting before retry..."
            sleep 15
          done

          echo "Deployment verification failed: SHA not found after retries."
          exit 1
